<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on whowin - 发表我个人原创作品的技术博客</title>
    <link>https://whowin.gitee.io/post/</link>
    <description>Recent content in Posts on whowin - 发表我个人原创作品的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 07 Mar 2023 16:43:29 +0800</lastBuildDate><atom:link href="https://whowin.gitee.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用tun虚拟网络接口建立IP隧道的实例</title>
      <link>https://whowin.gitee.io/post/blog/network/0018-tun-example-for-setting-up-ip-tunnel/</link>
      <pubDate>Tue, 07 Mar 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0018-tun-example-for-setting-up-ip-tunnel/</guid>
      <description>&lt;p&gt;通常的socket编程，面对的都是物理网卡，Linux下其实很容易创建虚拟网卡；本文简单介绍一下Linux虚拟网卡的概念，并以tun设备为例在客户端和服务器端分别建立一个实际的虚拟网卡，最终实现一个从客户端到服务器的简单的IP隧道，希望本文能对理解虚拟网卡和IP隧道有所帮助，本文将提供完整的源程序；本文假定读者已经拥有了在Linux下使用C语言进行IPv4下socket编程的基本能力。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用SNTP协议从时间服务器同步时间</title>
      <link>https://whowin.gitee.io/post/blog/network/0017-sync-time-from-time-server-using-sntp/</link>
      <pubDate>Mon, 13 Feb 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0017-sync-time-from-time-server-using-sntp/</guid>
      <description>&lt;p&gt;在互联网上校准时间，是几乎连接在互联网上的每台计算机都要去做的事情，而且很多是在后台完成的，并不需要人工干预；互联网上有很多时间服务器可以发布精确的时间，计算机客户端使用NTP(Network Time Protocol)协议与这些时间服务器进行时间同步，使本机得到精确时间，本文简要描述了NTP协议的原理，对NTP协议的时间同步精度做了简要分析，并具体实现了SNTP(Simple Network Time Protocol)下的客户端，本文附有完整的C语言SNTP客户端的源程序。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>简单的路由表查找程序</title>
      <link>https://whowin.gitee.io/post/blog/network/0016-longest-prefix-match/</link>
      <pubDate>Fri, 10 Feb 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0016-longest-prefix-match/</guid>
      <description>&lt;p&gt;在Linux操作系统中，内核中有一个路由表，它包含若干条路由记录，这些记录由子网IP、子网掩码、网关IP和接口名等组成，这些信息用于将数据包转发到其他子网或者连接到互联网；本文介绍了当需要转发数据包时，Linux内核查找路由表的基本算法，并用程序模拟了这个过程，附有完整的源代码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用raw socket发送magic packet</title>
      <link>https://whowin.gitee.io/post/blog/network/0015-send-magic-packet-via-raw-socket/</link>
      <pubDate>Thu, 09 Feb 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0015-send-magic-packet-via-raw-socket/</guid>
      <description>&lt;p&gt;Magic Packet是进行网络唤醒的数据包，将这个数据包以广播的形式发到局域网上，与数据包中所关联的MAC相同的电脑就会被唤醒开机，通常我们都是使用UDP报文的形式来发送这个数据包，但实际上在进行网络唤醒的时候，只要报文中包含Magic Packet应该就可以唤醒相关的计算机，与IP协议、UDP协议没有任何关系，本文将试图抛开网络层(IP层)和传输层(TCP/UDP层)，直接在数据链路层发出Magic Packet，并成功实现网络唤醒，本文将提供完整的源代码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从proc文件系统中获取gateway的IP地址</title>
      <link>https://whowin.gitee.io/post/blog/network/0008-get-gateway-ip-from-proc-filesys/</link>
      <pubDate>Sun, 05 Feb 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0008-get-gateway-ip-from-proc-filesys/</guid>
      <description>&lt;p&gt;在linux的命令行下获取当前网络环境的gateway的IP并不是一件难事，常用的命令有&lt;code&gt;ip route&lt;/code&gt;或者&lt;code&gt;route -n&lt;/code&gt;，其实&lt;code&gt;route -n&lt;/code&gt;也是通过读取proc文件系统下的文件来从内核获取路由表的，但&lt;code&gt;ip route&lt;/code&gt;是通过netlink来获取的路由表；本文将讨论如何编写程序从proc文件系统中获取路由表，并从路由表中获取gateway的IP地址，文章最后给出了完整的源程序。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux下使用netlink获取gateway的IP地址</title>
      <link>https://whowin.gitee.io/post/blog/network/0009-get-gateway-ip-via-netlink/</link>
      <pubDate>Sat, 04 Feb 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0009-get-gateway-ip-via-netlink/</guid>
      <description>&lt;p&gt;要在linux下的程序中获取gateway的IP地址，使用netlink是一种直接、可靠的方法，不需要依赖其它命令，直接从linux内核获取信息，netlink编程的中文资料很少，本文试图用尽可能简单的方式讨论使用netlink获取gataway的IP地址的编程方法，并有大量篇幅介绍netlink的相关数据结构和编程方法，假定阅读本文的读者对linux下编程有一定了解，具备一定的C语言能力，熟悉IPv4的socket编程。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>接收arp请求并发送回应的实例</title>
      <link>https://whowin.gitee.io/post/blog/network/0007-recv-arp-request-and-reply/</link>
      <pubDate>Thu, 12 Jan 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0007-recv-arp-request-and-reply/</guid>
      <description>&lt;p&gt;本文简单介绍了arp协议，用一个实例查看收到的ARP请求，并对该请求发出ARP回应，实例有完整的源代码，使用C语言在Linux下实现，代码中有详细的注释。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何用C语言操作arp cache</title>
      <link>https://whowin.gitee.io/post/blog/network/0014-handling-arp-cache/</link>
      <pubDate>Thu, 12 Jan 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0014-handling-arp-cache/</guid>
      <description>&lt;p&gt;arp cache对socket通信是至关重要的，arp cache由Linux内核进行维护，本文介绍如何用ioctl获取arp cache记录，添加新记录到arp cache中，删除arp cache中记录，每一种操作均给出了完整的源程序，本文程序在ubuntu 20.4中编译运行成功，gcc版本9.4.0&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TCP服务器如何使用select处理多客户连接</title>
      <link>https://whowin.gitee.io/post/blog/network/0011-handling-multiple-clients-on-server-with-select/</link>
      <pubDate>Mon, 09 Jan 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0011-handling-multiple-clients-on-server-with-select/</guid>
      <description>&lt;p&gt;本文用一个简化的实例说明如何在一个TCP服务器程序中，使用select处理同时出现的多个客户连接，文章给出了程序源代码，本文假定读者已经具备了基本的socket编程知识，熟悉基本的服务器/客户端模型架构。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用select实现的UDP/TCP组合服务器</title>
      <link>https://whowin.gitee.io/post/blog/network/0010-tcp-and-udp-server-using-select/</link>
      <pubDate>Sat, 07 Jan 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0010-tcp-and-udp-server-using-select/</guid>
      <description>&lt;p&gt;在以前的文章中，我们给出过UDP服务器和TCP服务器的例子，本文将把UDP服务器和TCP服务器合并成一个服务器，该服务器既可以提供UDP服务也可以提供TCP服务，本文将给出完整的源代码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用C语言实现服务器/客户端的TCP通信</title>
      <link>https://whowin.gitee.io/post/blog/network/0012-tcp-server-client-implementation-in-c/</link>
      <pubDate>Fri, 06 Jan 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0012-tcp-server-client-implementation-in-c/</guid>
      <description>&lt;p&gt;本文力求使用简单的描述说明一个服务器/客户端TCP通信的基本程序框架，文中给出了服务器端和客户端的实例源程序，本文的程序在ubuntu 20.04中编译运行成功，gcc版本号为：9.4.0&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用C语言实现服务器/客户端的UDP通信</title>
      <link>https://whowin.gitee.io/post/blog/network/0013-udp-server-client-implementation-in-c/</link>
      <pubDate>Thu, 05 Jan 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0013-udp-server-client-implementation-in-c/</guid>
      <description>&lt;p&gt;本文旨在使用简单的例子说明编写一个服务器/客户端模式的UDP通信程序的步骤，并通过一个实例给出了程序的基本框架，本文的程序在ubuntu 20.04中编译运行成功，gcc版本号为：9.4.0&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何使用raw socket发送UDP报文</title>
      <link>https://whowin.gitee.io/post/blog/network/0006-send-udp-with-raw-socket/</link>
      <pubDate>Tue, 27 Dec 2022 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0006-send-udp-with-raw-socket/</guid>
      <description>&lt;p&gt;前面写的一篇《Linux下如何在数据链路层接收原始数据包》举了一个实例，使用raw socket接收UDP数据报，但是发送一个数据包比接收要复杂一些，本文以一个实例说明如何使用raw socket发送一个UDP报文。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何计算IP报头的checksum</title>
      <link>https://whowin.gitee.io/post/blog/network/0004-checksum-of-ip-header/</link>
      <pubDate>Wed, 14 Dec 2022 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0004-checksum-of-ip-header/</guid>
      <description>&lt;p&gt;如果你研究过TCP/IP协议，那么你肯定知道IP报头中的checksum字段，或许你还曾经为如何计算这个字段的值所困扰，本文我们将讨论checksum的概念，并详细介绍IP报头中的checksum是如何计算的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何计算UDP头的checksum</title>
      <link>https://whowin.gitee.io/post/blog/network/0003-checksum-of-udp-header/</link>
      <pubDate>Mon, 12 Dec 2022 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0003-checksum-of-udp-header/</guid>
      <description>&lt;p&gt;UDP报头只有4个字段，分别是：源端口号、目的端口号、报文长度和报头checksum，其中的报头checksum这个字段在IPv4中并不是强制的，但在IPv6中是强制的，本文介绍UDP报头中checksum的计算方法，并给出相应的源程序。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何在Linux命令行下发送和接收UDP数据包</title>
      <link>https://whowin.gitee.io/post/blog/network/0005-send-udp-via-linux-cli/</link>
      <pubDate>Sat, 10 Dec 2022 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0005-send-udp-via-linux-cli/</guid>
      <description>&lt;p&gt;众所周知，在传输层有两个常用的协议 TCP 和 UDP，本文介绍在 Linux 命令行下，如何使用 nc 命令发送或接收 UDP 数据包，这些命令的用法对调试 UDP 通信程序将有所帮助。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux下如何在数据链路层接收原始数据包</title>
      <link>https://whowin.gitee.io/post/blog/network/0002-link-layer-programming/</link>
      <pubDate>Wed, 07 Dec 2022 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0002-link-layer-programming/</guid>
      <description>&lt;p&gt;大多数的网络编程都是在应用层接收数据和发送数据的，本文介绍在数据链路层的网络编程方法，介绍如何在数据链路层直接接收从物理层发过来的原始数据数据包，文章给出了一个完整的范例程序。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C语言如何获取ipv6地址</title>
      <link>https://whowin.gitee.io/post/blog/network/0001-how-to-get-ipv6-in-c/</link>
      <pubDate>Sun, 16 Oct 2022 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0001-how-to-get-ipv6-in-c/</guid>
      <description>&lt;p&gt;使用通常获取ipv4的IP地址的方法是无法获取ipv6地址的，本文介绍了使用C语言获取ipv6地址的三种方法：从proc文件从系统获取ipv6地址、使用getifaddrs()函数获取ipv6地址和使用netlink获取ipv6地址，每种方法均给出了完整的源程序，本文所有实例在 ubuntu 20.04 下测试通过，gcc 版本 9.4.0。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C语言函数调用时的参数传递机制</title>
      <link>https://whowin.gitee.io/post/blog/c/0001-parameters-passing-mechanism/</link>
      <pubDate>Tue, 20 Sep 2022 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/c/0001-parameters-passing-mechanism/</guid>
      <description>&lt;p&gt;本文通过实例验证了 C 语言函数调用时参数传递机制在 32 位和 64 位时的不同；阅读本文不仅需要 C 语言的知识，还需要有一些汇编语言的知识。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux文件权限：setuid、setgid和sticky bit</title>
      <link>https://whowin.gitee.io/post/blog/linux/0012-setuid/</link>
      <pubDate>Thu, 25 Aug 2022 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/linux/0012-setuid/</guid>
      <description>&lt;p&gt;Linux 下的文件权限管理分为三组：拥有者、组、其它用户，文件权限分为读、写、执行，但其实并不仅仅如此，还有 setuid、setgid、sticky bit 这一组标志，本文通过一个可执行文件的权限 4755 展开介绍 setuid、setgid 和 sticky bit 的概念，希望本文对读者理解 Linux 文件权限管理能有所帮助。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>远程开机：一个简单的嵌入式项目开发</title>
      <link>https://whowin.gitee.io/post/blog/embedded/0001-wake-on-lan/</link>
      <pubDate>Thu, 18 Aug 2022 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/embedded/0001-wake-on-lan/</guid>
      <description>&lt;p&gt;本文通过一个简单的需求介绍了在一个 &lt;em&gt;ARM&lt;/em&gt; 设备上开发一个程序实现远程打开服务器的过程，通过这个实例大致介绍了一个简单的嵌入式 &lt;em&gt;Linux&lt;/em&gt; 开发的过程。本文并不会详细介绍网络唤醒的原理以及 &lt;em&gt;Magic Packet&lt;/em&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>apt update如何工作</title>
      <link>https://whowin.gitee.io/post/blog/linux/0008-apt-update-ubuntu/</link>
      <pubDate>Sun, 10 Jul 2022 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/linux/0008-apt-update-ubuntu/</guid>
      <description>本文简单介绍了在</description>
    </item>
    
    <item>
      <title>安装一个好用的Ubuntu桌面</title>
      <link>https://whowin.gitee.io/post/blog/linux/0007-ubuntu-desktop/</link>
      <pubDate>Fri, 06 May 2022 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/linux/0007-ubuntu-desktop/</guid>
      <description>&lt;p&gt;本文只是记录了安装一个 Ubuntu 桌面及其应用环境的全过程，本文正是在这个环境中写成，仅此希望对准备使用 Ubuntu 桌面的朋友们有所帮助&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bash下变量PS1的完整理解</title>
      <link>https://whowin.gitee.io/post/blog/linux/0004-setup-ps1/</link>
      <pubDate>Mon, 18 Apr 2022 13:30:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/linux/0004-setup-ps1/</guid>
      <description>&lt;p&gt;本文并不会讲解如何设置PS1以获得你喜欢的提示符；本文会围绕PS1这个变量，就其涉及到的一些概念展开讨论&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>bash 的环境变量和 shell 变量</title>
      <link>https://whowin.gitee.io/post/blog/linux/0001-environment-variables-and-shell-variables/</link>
      <pubDate>Sun, 10 Apr 2022 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/linux/0001-environment-variables-and-shell-variables/</guid>
      <description>&lt;p&gt;本文简单介绍了bash的启动过程；shell变量和环境变量的区别及相互转换；环境变量传递给子进程的过程；在当前环境下执行脚本及其实际应用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ANSI的ESC转义序列</title>
      <link>https://whowin.gitee.io/post/blog/linux/0003-ansi-escape-code/</link>
      <pubDate>Wed, 06 Apr 2022 14:00:00 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/linux/0003-ansi-escape-code/</guid>
      <description>&lt;p&gt;本文较完整第介绍了ANSI的转义序列，大多数都可以用于在普通终端上显示出较为漂亮的界面，本文可以作为一个资料备查。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>完整的PS1控制码</title>
      <link>https://whowin.gitee.io/post/blog/linux/0002-ps1-control-codes/</link>
      <pubDate>Fri, 01 Apr 2022 14:00:00 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/linux/0002-ps1-control-codes/</guid>
      <description>&lt;p&gt;PS1变量是在 shell 下用于定义提示符的变量，本文列出了可用于该变量的所有的控制代码，仅供参考.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在DOS下进行网络编程（下）</title>
      <link>https://whowin.gitee.io/post/blog/dos/0008-network-programming-on-dos-2/</link>
      <pubDate>Fri, 11 Apr 2008 10:10:33 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/dos/0008-network-programming-on-dos-2/</guid>
      <description>&lt;p&gt;该文在上一篇文章的基础上，用一个完整的例子讲解在DOS下的网络编程方法&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在DOS下进行网络编程（上）</title>
      <link>https://whowin.gitee.io/post/blog/dos/0007-network-programming-on-dos-1/</link>
      <pubDate>Wed, 09 Apr 2008 10:06:26 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/dos/0007-network-programming-on-dos-1/</guid>
      <description>&lt;p&gt;该文介绍了在 DOS 下的进行网络编程的基本方法，该文写于2008年4月，2022年重新发表修了一些修改&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>DOS的系统杂项服务INT 15H介绍</title>
      <link>https://whowin.gitee.io/post/blog/dos/0006-dos-int15h-introduction/</link>
      <pubDate>Fri, 04 Apr 2008 09:32:48 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/dos/0006-dos-int15h-introduction/</guid>
      <description>&lt;p&gt;该文介绍了 DOS 下的 int 15h 的功能，可以作为资料备查&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>遍历 PCI 设备</title>
      <link>https://whowin.gitee.io/post/blog/dos/0005-traverse-pci-devices/</link>
      <pubDate>Wed, 02 Apr 2008 09:15:23 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/dos/0005-traverse-pci-devices/</guid>
      <description>&lt;p&gt;PC机在启动的时候，都会看到一个PCI设备清单，可以看到机器中的所有PCI设备，其实搜索PCI设备的程序并不难编，本文通过一个实例说明如何遍历PCI设备。本文程序的工作环境：MS-DOS 6.22，djgpp+RHIDE。本文初次发表于2008年4月2日，2011年3月11日做过修改，将其中的代码片段换为完整代码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 DOS 下的 DJGPP &#43; RHIDE 安装实作</title>
      <link>https://whowin.gitee.io/post/blog/dos/0004-install-djgpp-rhide-under-dos/</link>
      <pubDate>Fri, 28 Mar 2008 13:48:41 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/dos/0004-install-djgpp-rhide-under-dos/</guid>
      <description>&lt;p&gt;本文介绍在一个纯DOS构建一个C、C++和汇编的保护模式开发环境，编写的程序可以在纯DOS环境下运行在保护模式下&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 DOS 下安装 DJGPP</title>
      <link>https://whowin.gitee.io/post/blog/dos/0003-djgpp-installation/</link>
      <pubDate>Thu, 27 Mar 2008 14:27:38 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/dos/0003-djgpp-installation/</guid>
      <description>&lt;p&gt;该文翻译自 &lt;strong&gt;djgpp version 2.03&lt;/strong&gt; 的 &lt;em&gt;.readme&lt;/em&gt; 文件。本文中包含获得、安装、使用 &lt;strong&gt;DJGPP&lt;/strong&gt; 的信息，在寻求帮助之前请完整阅读该文档。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>调用PCI BIOS</title>
      <link>https://whowin.gitee.io/post/blog/dos/0002-invoking-pci-bios/</link>
      <pubDate>Tue, 18 Mar 2008 15:10:28 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/dos/0002-invoking-pci-bios/</guid>
      <description>&lt;p&gt;通过执行INT 1AH指令可以调用16位的PCI BIOS，也可以直接在物理寄存器位置000FFE6EH调用PCI BIOS。32位BIOS的调用要通过一个远程调用来实现。在这两种情况下，调用这都必须首先将需要的请求参数装入处理器的寄存器组。在入口AH寄存器必须包含PCI的功能ID：B1H，AL寄存器必须包含PCI下级功能识别器。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>32位 BIOS 说明</title>
      <link>https://whowin.gitee.io/post/blog/dos/0001-32bit-bios-introduction/</link>
      <pubDate>Tue, 18 Mar 2008 13:15:48 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/dos/0001-32bit-bios-introduction/</guid>
      <description>&lt;p&gt;PCI BIOS 在 PCI 编程中起着一定的作用，PCI BIOS 的资料也不是很好找，把找到的集中到这里，供参考。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://whowin.gitee.io/post/blog/network/0019-tap-example/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0019-tap-example/</guid>
      <description>tap设备实例</description>
    </item>
    
  </channel>
</rss>
