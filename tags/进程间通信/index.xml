<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>进程间通信 on whowin - 发表我个人原创作品的技术博客</title>
    <link>https://whowin.gitee.io/tags/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</link>
    <description>Recent content in 进程间通信 on whowin - 发表我个人原创作品的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 27 Sep 2023 16:43:29 +0800</lastBuildDate><atom:link href="https://whowin.gitee.io/tags/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>IPC之八：使用 POSIX 共享内存进行进程间通信的实例</title>
      <link>https://whowin.gitee.io/post/blog/linux/0018-posix-shared-memory/</link>
      <pubDate>Wed, 27 Sep 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/linux/0018-posix-shared-memory/</guid>
      <description>&lt;p&gt;IPC 是 Linux 编程中一个重要的概念，IPC 有多种方式，本文主要介绍共享内存(Shared Memory)，因为没有像管道、消息队列这样的中介介入，所以通常认为共享内存是迄今为止最快的 IPC 方式；Linux 既支持 UNIX SYSTEM V 的共享内存段，也支持 POSIX 的共享内存对象，本文针对 POSIX 共享内存对象，本文给出了多个具体的实例，每个实例均附有完整的源代码；本文所有实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文的实例中涉及多进程编程和信号处理等，阅读本文还需要一些基本的内存管理知识，本文对 Linux 编程的初学者有一些难度。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之七：使用 System V 共享内存段进行进程间通信的实例</title>
      <link>https://whowin.gitee.io/post/blog/linux/0017-systemv-shared-memory/</link>
      <pubDate>Tue, 12 Sep 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/linux/0017-systemv-shared-memory/</guid>
      <description>&lt;p&gt;IPC 是 Linux 编程中一个重要的概念，IPC 有多种方式，本文主要介绍共享内存(Shared Memory)，因为没有像管道、消息队列这样的中介介入，所以通常认为共享内存是迄今为止最快的 IPC 方式；Linux 既支持 UNIX SYSTEM V 的共享内存，也支持 POSIX 的共享内存，本文针对 System V 共享内存段，本文给出了多个具体的实例，每个实例均附有完整的源代码；本文所有实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文的实例中涉及多进程编程和信号处理等，阅读本文还需要一些基本的内存管理知识，本文对 Linux 编程的初学者有一些难度。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之六：使用 POSIX 信号量解决经典的&#39;生产者-消费者问题&#39;</title>
      <link>https://whowin.gitee.io/post/blog/linux/0016-posix-semaphores/</link>
      <pubDate>Wed, 06 Sep 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/linux/0016-posix-semaphores/</guid>
      <description>&lt;p&gt;IPC 是 Linux 编程中一个重要的概念，IPC 有多种方式，本文主要介绍信号量(Semaphores)，尽管信号量被认为是 IPC 的一种方式，但实际上通常把信号量用于进程间同步或者资源互斥，和共享内存(Shared Memory)配合使用，可以实现完美的进程间通信；Linux 既支持 UNIX SYSTEM V 的信号量集，也支持 POSIX 的信号量，本文针对 POSIX 信号量，本文给出了多个具体的实例，每个实例均附有完整的源代码；本文所有实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文的实例中涉及多线程编程和信号处理等，对 Linux 编程的初学者有一些难度。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之五：使用 System V 信号量集解决经典的&#39;哲学家就餐问题&#39;</title>
      <link>https://whowin.gitee.io/post/blog/linux/0015-systemv-semaphore-sets/</link>
      <pubDate>Fri, 01 Sep 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/linux/0015-systemv-semaphore-sets/</guid>
      <description>&lt;p&gt;IPC 是 Linux 编程中一个重要的概念，IPC 有多种方式，本文主要介绍信号量集(Semaphore Sets)，尽管信号量集被认为是 IPC 的一种方式，但实际上通常把信号量集用于进程间同步或者资源访问互斥，信号量集和共享内存(Shared Memory)配合使用，可以实现完美的进程间通信；Linux 既支持 UNIX SYSTEM V 的信号量集，也支持 POSIX 的信号量集，本文仅针对 SYSTEM V 信号量集；本文给出了多个具体的实例，每个实例均附有完整的源代码；本文所有实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文的实例中涉及多线程编程和信号处理等，对 Linux 编程的初学者有一些难度。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之四：使用 POSIX 消息队列进行进程间通信的实例</title>
      <link>https://whowin.gitee.io/post/blog/linux/0014-posix-message-queue/</link>
      <pubDate>Sun, 20 Aug 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/linux/0014-posix-message-queue/</guid>
      <description>&lt;p&gt;IPC 是 Linux 编程中一个重要的概念，IPC 有多种方式，本文主要介绍消息队列(Message Queues)，消息队列可以完成同一台计算机上的进程之间的通信，相比较管道，消息队列要复杂一些，但使用起来更加灵活和方便，Linux 既支持 UNIX SYSTEM V 的消息队列，也支持 POSIX 的消息队列，本文针对 POSIX 消息队列，POSIX 标准引入了一个简单的基于文件的接口，使应用程序可以轻松地与消息队列进行交互；本文给出了多个具体的实例，每个实例均附有完整的源代码；本文所有实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文适合 Linux 编程的初学者阅读。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之三：使用 System V 消息队列进行进程间通信的实例</title>
      <link>https://whowin.gitee.io/post/blog/linux/0013-systemv-message-queue/</link>
      <pubDate>Sat, 05 Aug 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/linux/0013-systemv-message-queue/</guid>
      <description>&lt;p&gt;IPC 是 Linux 编程中一个重要的概念，IPC 有多种方式，本文主要介绍消息队列(Message Queues)，消息队列可以完成同一台计算机上的进程之间的通信，相比较管道，消息队列要复杂一些，但使用起来更加灵活和方便，Linux 既支持 UNIX SYSTEM V 的消息队列，也支持 POSIX 的消息队列，本文针对 System V 消息队列，并给出了多个具体的实例，每个实例均附有完整的源代码；本文所有实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文适合 Linux 编程的初学者阅读。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之二：使用命名管道(FIFO)进行进程间通信的例子</title>
      <link>https://whowin.gitee.io/post/blog/linux/0011-ipc-examples-of-fifo/</link>
      <pubDate>Wed, 02 Aug 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/linux/0011-ipc-examples-of-fifo/</guid>
      <description>&lt;p&gt;IPC 是 Linux 编程中一个重要的概念，IPC 有多种方式，本文主要介绍命名管道(FIFO)，命名管道可以完成同一台计算机上的进程之间的通信，本文给出了多个具体的实例，每个实例均附有完整的源代码；本文所有实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文适合 Linux 编程的初学者阅读。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之一：使用匿名管道进行父子进程间通信的例子</title>
      <link>https://whowin.gitee.io/post/blog/linux/0010-ipc-example-of-anonymous-pipe/</link>
      <pubDate>Fri, 28 Jul 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/linux/0010-ipc-example-of-anonymous-pipe/</guid>
      <description>&lt;p&gt;IPC 是 Linux 编程中一个重要的概念，IPC 有多种方式，本文主要介绍匿名管道(又称管道、半双工管道)，尽管很多人在编程中使用过管道，但一些特殊的用法还是鲜有文章涉及，本文给出了多个具体的实例，每个实例均附有完整的源代码；本文所有实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文适合 Linux 编程的初学者阅读&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
