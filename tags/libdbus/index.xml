<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>libdbus on whowin - 发表我个人原创作品的技术博客</title>
    <link>https://whowin.gitee.io/tags/libdbus/</link>
    <description>Recent content in libdbus on whowin - 发表我个人原创作品的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 08 Jan 2024 16:43:29 +0800</lastBuildDate><atom:link href="https://whowin.gitee.io/tags/libdbus/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>IPC之十六：D-Bus的标准接口和服务接口的具体实现</title>
      <link>https://whowin.gitee.io/post/blog/linux/0026-standard-and-service-interfaces/</link>
      <pubDate>Mon, 08 Jan 2024 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/linux/0026-standard-and-service-interfaces/</guid>
      <description>&lt;p&gt;D-Bus的规范中提供了一系列的标准接口，绝大多数有D-Bus接口的系统调用都会实现这些标准接口，这些标准接口中包括D-Bus的自省(Introspection)机制，自省机制可以让我们通过一个标准接口了解一个D-Bus服务的各种方法的调用方法，本文将介绍D-Bus的这些标准接口及实现方式，同时也会介绍如何在D-Bus上提供自有服务，本文附有完整的实例和完整的源代码；本文实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文不适合 Linux 编程的初学者阅读。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之十五：使用libdbus通过D-Bus请求系统调用实现任意DNS记录解析的实例</title>
      <link>https://whowin.gitee.io/post/blog/linux/0025-resolve-arbitrary-dns-record/</link>
      <pubDate>Thu, 28 Dec 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/linux/0025-resolve-arbitrary-dns-record/</guid>
      <description>&lt;p&gt;关于D-Bus的文章中曾介绍了如何通过D-Bus调用系统服务从而实现解析出一个域名的IP地址的过程，本文我们继续调用系统调用来实现解析任意DNS记录，系统调用的方法与前一篇文章类似，只是方法名称和调用参数以及返回参数不同，本文将详细介绍systemd-resolved服务中的ResolveRecord方法，同前面几篇关于D-BUS的文章相同，本文将使用 libdbus 库实现系统服务的调用，本文给出了实现解析任意DNS记录的实例，附有完整的源代码；本文实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文不适合 Linux 编程的初学者阅读。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之十三：使用libdbus通过D-Bus请求系统调用实现域名解析的实例</title>
      <link>https://whowin.gitee.io/post/blog/linux/0023-dbus-resolve-hostname/</link>
      <pubDate>Sun, 10 Dec 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/linux/0023-dbus-resolve-hostname/</guid>
      <description>&lt;p&gt;前面两篇有关 D-Bus 的文章介绍了使用 libdbus 库进行进程间的方法调用和信号的传输，实际上 D-Bus 的更强大的地方是其建立了与大量系统服务之间建立了有效的对话规范，使得应用程序可以使用标准的方式调用系统服务的方法，访问系统服务中的一些开放的属性，本文将使用 libdbus 库调用系统服务中的方法从而实现域名解析，本文给出了实现该功能的实例，附有完整的源代码；本文实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文不适合 Linux 编程的初学者阅读。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之十二：使用libdbus在D-Bus上异步发送/接收信号的实例</title>
      <link>https://whowin.gitee.io/post/blog/linux/0022-dbus-asyn-process-signal/</link>
      <pubDate>Wed, 06 Dec 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/linux/0022-dbus-asyn-process-signal/</guid>
      <description>&lt;p&gt;IPC 是 Linux 编程中一个重要的概念，IPC 有多种方式，本 IPC 系列文章的前十篇介绍了几乎所有的常用的 IPC 方法，每种方法都给出了具体实例，前面的文章里介绍了 D-Bus 的基本概念以及调用远程方法的实例，本文介绍 D-Bus 的异步处理机制，以及信号处理的基本方法，本文给出了异步处理 D-Bus 的实例，附有完整的源代码；本文实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文不适合 Linux 编程的初学者阅读。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之十一：使用D-Bus实现客户端向服务端请求服务的实例</title>
      <link>https://whowin.gitee.io/post/blog/linux/0021-ipc-using-dbus/</link>
      <pubDate>Fri, 01 Dec 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/linux/0021-ipc-using-dbus/</guid>
      <description>&lt;p&gt;IPC 是 Linux 编程中一个重要的概念，IPC 有多种方式，本 IPC 系列文章的前十篇介绍了几乎所有的常用的 IPC 方法，每种方法都给出了具体实例，本文介绍在 Linux 下 IPC 的另外一种实现，D-Bus，D-Bus 是一种用于进程间通信的消息总线系统，它提供了一个可靠且灵活的机制，使得不同进程之间能够相互通信，本文给出了使用 D-Bus 进行基本 IPC 的实例，并附有完整的源代码；本文实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文不适合 Linux 编程的初学者阅读。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
