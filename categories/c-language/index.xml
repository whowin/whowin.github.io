<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C Language on whowin - 发表我个人原创作品的技术博客</title>
    <link>https://whowin.gitee.io/categories/c-language/</link>
    <description>Recent content in C Language on whowin - 发表我个人原创作品的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 20 Sep 2024 23:48:29 +0800</lastBuildDate><atom:link href="https://whowin.gitee.io/categories/c-language/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>双向链表及如何使用GLib的GList实现双向链表</title>
      <link>https://whowin.gitee.io/post/blog/c/0004-doubly-linked-lists-in-glib/</link>
      <pubDate>Fri, 20 Sep 2024 23:48:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/c/0004-doubly-linked-lists-in-glib/</guid>
      <description>&lt;p&gt;双向链表是一种比单向链表更为灵活的数据结构，与单向链表相比可以有更多的应用场景，本文讨论双向链表的基本概念及实现方法，并着重介绍使用GLib的GList实现单向链表的方法及步骤，本文给出了多个实际范例源代码，旨在帮助学习基于GLib编程的读者较快地掌握GSList的使用方法，本文程序在 ubuntu 20.04 下编译测试完成，gcc 版本号 9.4.0；本文适合初学者阅读。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>单向链表以及如何使用GLib中的GSList实现单向链表</title>
      <link>https://whowin.gitee.io/post/blog/c/0003-singly-linked-lists-in-glib/</link>
      <pubDate>Tue, 20 Aug 2024 23:48:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/c/0003-singly-linked-lists-in-glib/</guid>
      <description>&lt;p&gt;单向链表是一种基础的数据结构，也是一种简单而灵活的数据结构，本文讨论单向链表的基本概念及实现方法，并着重介绍使用GLib的GSList实现单向链表的方法及步骤，本文给出了多个实际范例源代码，旨在帮助学习基于GLib编程的读者较快地掌握GSList的使用方法，本文程序在 ubuntu 20.04 下编译测试完成，gcc 版本号 9.4.0；本文适合初学者阅读。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用GLib进行C语言编程的实例</title>
      <link>https://whowin.gitee.io/post/blog/c/0002-start-programming-with-glib/</link>
      <pubDate>Sat, 10 Aug 2024 23:48:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/c/0002-start-programming-with-glib/</guid>
      <description>&lt;p&gt;本文将讨论使用GLib进行编程的基本步骤，GLib是一个跨平台的，用C语言编写的3个底层库(以前是5个)的集合，GLib提供了多种高级的数据结构，如内存块、双向和单向链表、哈希表等，GLib还实现了线程相关的函数、多线程编程以及相关的工具，例如原始变量访问、互斥锁、异步队列等，GLib主要由GNOME开发；本文是使用GLib编程的入门文章，旨在通过实例帮助希望学习GLib编程的读者较快地入门，本文将给出多个使用GLib库编程范例的源代码，本文程序在 ubuntu 20.04 下编译测试完成，gcc 版本号 9.4.0；本文适合初学者阅读。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux下使用libiw进行无线信号扫描的实例</title>
      <link>https://whowin.gitee.io/post/blog/network/0026-wifi-scanner-with-libiw/</link>
      <pubDate>Fri, 05 Jul 2024 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0026-wifi-scanner-with-libiw/</guid>
      <description>&lt;p&gt;打开电脑连接wifi是一件很平常的事情，但这些事情通常都是操作系统下的wifi管理程序替我们完成的，如何在程序中扫描wifi信号其实资料并不多，前面已经有两篇文章介绍了如何使用ioctl()扫描wifi信号，但其实在Linux下有一个简单的库对这些ioctl()的操作进行了封装，这个库就是libiw，使用libiw可以简化编程，本文介绍了如果使用libiw对wifi信号进行扫描的基本方法，本文将给出完整的源代码，本文程序在 ubuntu 20.04 下编译测试完成，gcc 版本号 9.4.0；尽管本文内容主要涉及无线网络，但读者并不需要对 802.11 标准有所了解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>libiw中的函数说明</title>
      <link>https://whowin.gitee.io/post/blog/network/0027-libiw-functions/</link>
      <pubDate>Sat, 13 Apr 2024 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0027-libiw-functions/</guid>
      <description>&lt;p&gt;打开电脑连接wifi是一件很平常的事情，但这些事情通常都是操作系统下的wifi管理程序替我们完成的，如何在程序中连接指定的wifi其实很少有资料介绍，在网络专栏的文章中，有两篇是关于wfi编程的文章，其中对无线网卡的操作都是通过ioctl()完成的，显得有些繁琐和晦涩，但其实WE(Wireless Extensions)有一个简单的库libiw，这个库的实现也是使用ioctl()，但是经过封装后，会使wifi编程变得容易一些，本文为一篇资料类的文章，主要描述libiw中API的调用方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用ioctl扫描wifi信号获取信号属性的实例(二)</title>
      <link>https://whowin.gitee.io/post/blog/network/0025-another-wifi-scanner-example/</link>
      <pubDate>Thu, 11 Apr 2024 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0025-another-wifi-scanner-example/</guid>
      <description>&lt;p&gt;使用工具软件扫描 wifi 信号是一件很平常的事情，在知晓 wifi 密码的前提下，通常我们会尽可能地连接信号质量比较好的 wifi 信号，但是如何通过编程来扫描 wifi 信号并获得这些信号的属性(比如信号强度等)，却鲜有文章提及，本文在前面博文的基础上通过实例向读者介绍如何通过编程扫描 wifi 信号，并获得信号的一系列的属性，本文给出了完整的源代码，本文程序在 ubuntu 20.04 下编译测试完成，gcc 版本号 9.4.0；阅读本文并不需要对 IEEE802.11 协议有所了解，但本文实例中大量涉及链表和指针，所以本文可能不适合初学者阅读。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用epoll()进行socket编程处理多客户连接的TCP服务器实例</title>
      <link>https://whowin.gitee.io/post/blog/network/0024-using-epoll-in-socket-programming/</link>
      <pubDate>Sun, 10 Mar 2024 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0024-using-epoll-in-socket-programming/</guid>
      <description>&lt;p&gt;在网络编程中，当需要使用单线程处理多客户端的连接时，常使用select()或者poll()来处理，但是当并发数量非常大时，select()和poll()的性能并不好，epoll()的性能大大好于select()和poll()，在编写大并发的服务器软件时，epoll()应该是首选的方案，本文介绍epoll()在网络编程中的使用方法，本文提供了一个具体的实例，并附有完整的源代码，本文实例在 ubuntu 20.04 下编译测试完成，gcc 版本号 9.4.0。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用poll()代替select()处理多客户连接的TCP服务器实例</title>
      <link>https://whowin.gitee.io/post/blog/network/0021-using-poll-instead-of-select/</link>
      <pubDate>Tue, 27 Feb 2024 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0021-using-poll-instead-of-select/</guid>
      <description>&lt;p&gt;在网络编程中，使用 select() 处理多客户端的连接是非常常用的方法，select() 是一个非常古老的方法，在大量连接下会显得效率不高，而且其对描述符的数值还有一些限制，Linux内核从 2.1.13 版以后提供了 poll() 替代 select()，本文介绍 poll() 在网络编程中的使用方法，并着重介绍 poll() 在编程行与 select() 的区别，旨在帮助熟悉 select() 编程的程序员可以很容易地使用 poll() 编程，本文提供了一个具体的实例，并附有完整的源代码，本文实例在 ubuntu 20.04 下编译测试完成，gcc 版本号 9.4.0。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用signal中止阻塞的socket函数的应用实例</title>
      <link>https://whowin.gitee.io/post/blog/network/0023-using-signals-with-blocking-socket-apis/</link>
      <pubDate>Thu, 25 Jan 2024 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0023-using-signals-with-blocking-socket-apis/</guid>
      <description>&lt;p&gt;在 socket 编程中，有一些函数是阻塞的，为了使程序高效运行，有一些办法可以把这些阻塞函数变成非阻塞的，本文介绍一种使用定时器信号中断阻塞函数的方法，同时介绍了一些信号处理和定时器设置的编程方法，本文附有完整实例的源代码，本文实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文不适合 Linux 编程的初学者阅读。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>D-Bus的标准接口、自省机制和服务接口的具体实现方法</title>
      <link>https://whowin.gitee.io/post/blog/ipc/0026-standard-and-service-interfaces/</link>
      <pubDate>Mon, 08 Jan 2024 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/ipc/0026-standard-and-service-interfaces/</guid>
      <description>&lt;p&gt;D-Bus的规范中提供了一系列的标准接口，绝大多数有D-Bus接口的系统调用都会实现这些标准接口，这些标准接口中包括D-Bus的自省(Introspection)机制，自省机制可以让我们通过一个标准接口了解一个D-Bus服务的各种方法的调用方法，本文将介绍D-Bus的这些标准接口及实现方式，同时也会介绍如何在D-Bus上提供自有服务，本文附有完整的实例和完整的源代码；本文实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文不适合 Linux 编程的初学者阅读。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之十五：使用libdbus通过D-Bus请求系统调用实现任意DNS记录解析的实例</title>
      <link>https://whowin.gitee.io/post/blog/ipc/0025-resolve-arbitrary-dns-record/</link>
      <pubDate>Thu, 28 Dec 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/ipc/0025-resolve-arbitrary-dns-record/</guid>
      <description>&lt;p&gt;关于D-Bus的文章中曾介绍了如何通过D-Bus调用系统服务从而实现解析出一个域名的IP地址的过程，本文我们继续调用系统调用来实现解析任意DNS记录，系统调用的方法与前一篇文章类似，只是方法名称和调用参数以及返回参数不同，本文将详细介绍systemd-resolved服务中的ResolveRecord方法，同前面几篇关于D-BUS的文章相同，本文将使用 libdbus 库实现系统服务的调用，本文给出了实现解析任意DNS记录的实例，附有完整的源代码；本文实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文不适合 Linux 编程的初学者阅读。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之十四：使用libdbus通过select()接收D-Bus消息的实例</title>
      <link>https://whowin.gitee.io/post/blog/ipc/0024-select-recv-message/</link>
      <pubDate>Mon, 25 Dec 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/ipc/0024-select-recv-message/</guid>
      <description>&lt;p&gt;在『进程间通信』系列文章中前面已经有三篇关于D-Bus的文章，本文继续讨论D-Bus；libdbus抽象了实现IPC时实际使用的方式(管道、socket等)，libdbus允许在一个D-Bus连接上添加一个watch，通过watch对实际IPC中使用的文件描述符进行监视，本文讨论了如何在D-Bus连接中添加watch，如何使用在socket编程中常用的select从D-Bus返回的文件描述符中接收到D-Bus消息，本文给出了具体实例，附有完整的源代码；本文实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文不适合 Linux 编程的初学者阅读。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之十三：使用libdbus通过D-Bus请求系统调用实现域名解析的实例</title>
      <link>https://whowin.gitee.io/post/blog/ipc/0023-dbus-resolve-hostname/</link>
      <pubDate>Sun, 10 Dec 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/ipc/0023-dbus-resolve-hostname/</guid>
      <description>&lt;p&gt;前面两篇有关 D-Bus 的文章介绍了使用 libdbus 库进行进程间的方法调用和信号的传输，实际上 D-Bus 的更强大的地方是其建立了与大量系统服务之间建立了有效的对话规范，使得应用程序可以使用标准的方式调用系统服务的方法，访问系统服务中的一些开放的属性，本文将使用 libdbus 库调用系统服务中的方法从而实现域名解析，本文给出了实现该功能的实例，附有完整的源代码；本文实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文不适合 Linux 编程的初学者阅读。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之十二：使用libdbus在D-Bus上异步发送/接收信号的实例</title>
      <link>https://whowin.gitee.io/post/blog/ipc/0022-dbus-asyn-process-signal/</link>
      <pubDate>Wed, 06 Dec 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/ipc/0022-dbus-asyn-process-signal/</guid>
      <description>&lt;p&gt;IPC 是 Linux 编程中一个重要的概念，IPC 有多种方式，本 IPC 系列文章的前十篇介绍了几乎所有的常用的 IPC 方法，每种方法都给出了具体实例，前面的文章里介绍了 D-Bus 的基本概念以及调用远程方法的实例，本文介绍 D-Bus 的异步处理机制，以及信号处理的基本方法，本文给出了异步处理 D-Bus 的实例，附有完整的源代码；本文实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文不适合 Linux 编程的初学者阅读。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之十一：使用D-Bus实现客户端向服务端请求服务的实例</title>
      <link>https://whowin.gitee.io/post/blog/ipc/0021-ipc-using-dbus/</link>
      <pubDate>Fri, 01 Dec 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/ipc/0021-ipc-using-dbus/</guid>
      <description>&lt;p&gt;IPC 是 Linux 编程中一个重要的概念，IPC 有多种方式，本 IPC 系列文章的前十篇介绍了几乎所有的常用的 IPC 方法，每种方法都给出了具体实例，本文介绍在 Linux 下 IPC 的另外一种实现，D-Bus，D-Bus 是一种用于进程间通信的消息总线系统，它提供了一个可靠且灵活的机制，使得不同进程之间能够相互通信，本文给出了使用 D-Bus 进行基本 IPC 的实例，并附有完整的源代码；本文实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文不适合 Linux 编程的初学者阅读。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之十：使用共享文件进行进程间通信的实例</title>
      <link>https://whowin.gitee.io/post/blog/ipc/0020-ipc-using-files/</link>
      <pubDate>Mon, 06 Nov 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/ipc/0020-ipc-using-files/</guid>
      <description>&lt;p&gt;IPC 是 Linux 编程中一个重要的概念，IPC 有多种方式，常用的 IPC 方式有管道、消息队列、共享内存等，但其实使用广大程序员都熟悉的文件也是可以完成 IPC 的，本文介绍如何使用共享文件实现进程间通信，本文给出了具体的实例，并附有完整的源代码；本文实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文的实例中涉及多进程编程、文件锁等概念，所以对 Linux 编程的初学者有一些难度，但对于了解 Linux 下共享文件，特别是文件锁的应用，将是非常难得的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之九：使用UNIX Domain Socket进行进程间通信的实例</title>
      <link>https://whowin.gitee.io/post/blog/ipc/0019-ipc-with-unix-domain-socket/</link>
      <pubDate>Mon, 16 Oct 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/ipc/0019-ipc-with-unix-domain-socket/</guid>
      <description>&lt;p&gt;socket 编程是一种用于网络通信的编程方式，在 socket 的协议族中除了常用的 AF_INET、AF_RAW、AF_NETLINK等以外，还有一个专门用于 IPC 的协议族 AF_UNIX，IPC 是 Linux 编程中一个重要的概念，常用的 IPC 方式有管道、消息队列、共享内存等，本文主要介绍用于本地进程间通信的 UNIX Domain Socket，本文给出了多个具体的实例，每个实例均附有完整的源代码；本文所有实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文的实例中涉及多进程编程等，本文对 Linux 编程的初学者有一些难度。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之八：使用 POSIX 共享内存进行进程间通信的实例</title>
      <link>https://whowin.gitee.io/post/blog/ipc/0018-posix-shared-memory/</link>
      <pubDate>Wed, 27 Sep 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/ipc/0018-posix-shared-memory/</guid>
      <description>&lt;p&gt;IPC 是 Linux 编程中一个重要的概念，IPC 有多种方式，本文主要介绍共享内存(Shared Memory)，因为没有像管道、消息队列这样的中介介入，所以通常认为共享内存是迄今为止最快的 IPC 方式；Linux 既支持 UNIX SYSTEM V 的共享内存段，也支持 POSIX 的共享内存对象，本文针对 POSIX 共享内存对象，本文给出了多个具体的实例，每个实例均附有完整的源代码；本文所有实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文的实例中涉及多进程编程和信号处理等，阅读本文还需要一些基本的内存管理知识，本文对 Linux 编程的初学者有一些难度。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之七：使用 System V 共享内存段进行进程间通信的实例</title>
      <link>https://whowin.gitee.io/post/blog/ipc/0017-systemv-shared-memory/</link>
      <pubDate>Tue, 12 Sep 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/ipc/0017-systemv-shared-memory/</guid>
      <description>&lt;p&gt;IPC 是 Linux 编程中一个重要的概念，IPC 有多种方式，本文主要介绍共享内存(Shared Memory)，因为没有像管道、消息队列这样的中介介入，所以通常认为共享内存是迄今为止最快的 IPC 方式；Linux 既支持 UNIX SYSTEM V 的共享内存，也支持 POSIX 的共享内存，本文针对 System V 共享内存段，本文给出了多个具体的实例，每个实例均附有完整的源代码；本文所有实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文的实例中涉及多进程编程和信号处理等，阅读本文还需要一些基本的内存管理知识，本文对 Linux 编程的初学者有一些难度。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之六：使用 POSIX 信号量解决经典的&#39;生产者-消费者问题&#39;</title>
      <link>https://whowin.gitee.io/post/blog/ipc/0016-posix-semaphores/</link>
      <pubDate>Wed, 06 Sep 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/ipc/0016-posix-semaphores/</guid>
      <description>&lt;p&gt;IPC 是 Linux 编程中一个重要的概念，IPC 有多种方式，本文主要介绍信号量(Semaphores)，尽管信号量被认为是 IPC 的一种方式，但实际上通常把信号量用于进程间同步或者资源互斥，和共享内存(Shared Memory)配合使用，可以实现完美的进程间通信；Linux 既支持 UNIX SYSTEM V 的信号量集，也支持 POSIX 的信号量，本文针对 POSIX 信号量，本文给出了多个具体的实例，每个实例均附有完整的源代码；本文所有实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文的实例中涉及多线程编程和信号处理等，对 Linux 编程的初学者有一些难度。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之五：使用 System V 信号量集解决经典的&#39;哲学家就餐问题&#39;</title>
      <link>https://whowin.gitee.io/post/blog/ipc/0015-systemv-semaphore-sets/</link>
      <pubDate>Fri, 01 Sep 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/ipc/0015-systemv-semaphore-sets/</guid>
      <description>&lt;p&gt;IPC 是 Linux 编程中一个重要的概念，IPC 有多种方式，本文主要介绍信号量集(Semaphore Sets)，尽管信号量集被认为是 IPC 的一种方式，但实际上通常把信号量集用于进程间同步或者资源访问互斥，信号量集和共享内存(Shared Memory)配合使用，可以实现完美的进程间通信；Linux 既支持 UNIX SYSTEM V 的信号量集，也支持 POSIX 的信号量集，本文仅针对 SYSTEM V 信号量集；本文给出了多个具体的实例，每个实例均附有完整的源代码；本文所有实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文的实例中涉及多线程编程和信号处理等，对 Linux 编程的初学者有一些难度。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之四：使用 POSIX 消息队列进行进程间通信的实例</title>
      <link>https://whowin.gitee.io/post/blog/ipc/0014-posix-message-queue/</link>
      <pubDate>Sun, 20 Aug 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/ipc/0014-posix-message-queue/</guid>
      <description>&lt;p&gt;IPC 是 Linux 编程中一个重要的概念，IPC 有多种方式，本文主要介绍消息队列(Message Queues)，消息队列可以完成同一台计算机上的进程之间的通信，相比较管道，消息队列要复杂一些，但使用起来更加灵活和方便，Linux 既支持 UNIX SYSTEM V 的消息队列，也支持 POSIX 的消息队列，本文针对 POSIX 消息队列，POSIX 标准引入了一个简单的基于文件的接口，使应用程序可以轻松地与消息队列进行交互；本文给出了多个具体的实例，每个实例均附有完整的源代码；本文所有实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文适合 Linux 编程的初学者阅读。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之三：使用 System V 消息队列进行进程间通信的实例</title>
      <link>https://whowin.gitee.io/post/blog/ipc/0013-systemv-message-queue/</link>
      <pubDate>Sat, 05 Aug 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/ipc/0013-systemv-message-queue/</guid>
      <description>&lt;p&gt;IPC 是 Linux 编程中一个重要的概念，IPC 有多种方式，本文主要介绍消息队列(Message Queues)，消息队列可以完成同一台计算机上的进程之间的通信，相比较管道，消息队列要复杂一些，但使用起来更加灵活和方便，Linux 既支持 UNIX SYSTEM V 的消息队列，也支持 POSIX 的消息队列，本文针对 System V 消息队列，并给出了多个具体的实例，每个实例均附有完整的源代码；本文所有实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文适合 Linux 编程的初学者阅读。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之二：使用命名管道(FIFO)进行进程间通信的例子</title>
      <link>https://whowin.gitee.io/post/blog/ipc/0011-ipc-examples-of-fifo/</link>
      <pubDate>Wed, 02 Aug 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/ipc/0011-ipc-examples-of-fifo/</guid>
      <description>&lt;p&gt;IPC 是 Linux 编程中一个重要的概念，IPC 有多种方式，本文主要介绍命名管道(FIFO)，命名管道可以完成同一台计算机上的进程之间的通信，本文给出了多个具体的实例，每个实例均附有完整的源代码；本文所有实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文适合 Linux 编程的初学者阅读。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>IPC之一：使用匿名管道进行父子进程间通信的例子</title>
      <link>https://whowin.gitee.io/post/blog/ipc/0010-ipc-example-of-anonymous-pipe/</link>
      <pubDate>Fri, 28 Jul 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/ipc/0010-ipc-example-of-anonymous-pipe/</guid>
      <description>&lt;p&gt;IPC 是 Linux 编程中一个重要的概念，IPC 有多种方式，本文主要介绍匿名管道(又称管道、半双工管道)，尽管很多人在编程中使用过管道，但一些特殊的用法还是鲜有文章涉及，本文给出了多个具体的实例，每个实例均附有完整的源代码；本文所有实例在 Ubuntu 20.04 上编译测试通过，gcc版本号为：9.4.0；本文适合 Linux 编程的初学者阅读&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用ioctl扫描wifi信号获取信号属性的实例(一)</title>
      <link>https://whowin.gitee.io/post/blog/network/0022-how-to-scan-wifi-signal/</link>
      <pubDate>Mon, 26 Jun 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0022-how-to-scan-wifi-signal/</guid>
      <description>&lt;p&gt;使用 wifi 是一件再平常不过的是事情，有很多 wifi 工具可以帮助你扫描附近的 wifi 信号，测试信号强度等，但如何通过编程来操作 wifi 却鲜有文章涉及；本文立足实践，不使用任何第三方库，仅使用 ioctl 扫描附近的 wifi 信号，并获取这些 AP 的 ESSID、MAC 地址、占用信道和工作频率，本文将给出完整的源程序，今后还会写一些文章讨论如果编程获取 wifi 信号的其它属性(比如：信号强度、加密方式等)的方法，敬请关注；本文程序在 ubuntu 20.04 下编译测试完成，gcc 版本号 9.4.0；阅读本文并不需要对 IEEE802.11 协议有所了解。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用C语言实现的一个DNS客户端</title>
      <link>https://whowin.gitee.io/post/blog/network/0019-dns-client-in-c/</link>
      <pubDate>Tue, 28 Mar 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0019-dns-client-in-c/</guid>
      <description>&lt;p&gt;DNS可以帮助我们把域名映射到一个IP地址上，或者查询一个IP地址下有那些域名，使用域名访问一个网站或者服务器是一件很平常的事情，很少有人关心域名变成IP地址的实际过程，本文将使用C语言实现一个基本的DNS解析器，通过与DNS服务器的通信完成将一个域名转换成IP地址的过程，本文将提供完整的源程序；阅读本文需要有一定的网络编程基础，熟悉基本的socket编程并对DNS有一些了解，本文对网络编程的初学者难度较大。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用SOCK_DGRAM类型的socket实现的ping程序</title>
      <link>https://whowin.gitee.io/post/blog/network/0020-implement-ping-program-with-sock-dgram/</link>
      <pubDate>Thu, 16 Mar 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0020-implement-ping-program-with-sock-dgram/</guid>
      <description>&lt;p&gt;SOCK_DGRAM类型的socket常用于UDP通信，本文将尝试把这种socket用于ICMP协议，并完成一个简单的ping程序。使用ping去测试某个主机是否可用可能是一件很平常的事，尽管ping非常普通，但是编写一个实现ping功能的程序却并不是那么简单，因为ping使用的ICMP协议并不是一个应用层协议，在网上看到的实现ping的例子大多使用raw socket去实现，不仅增加了解析IP报头的麻烦，而且还需要有root权限才能运行，本文简要介绍ICMP协议，并给出一个使用普通的常用于UDP通信的socket实现ping的实例，本文将提供完整的源程序，本文的程序在 Ubuntu 20.04 下测试通过，gcc 版本号 9.4.0；阅读本文需要熟悉socket编程，对初学者而言，本文有一定的难度。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用tun虚拟网络接口建立IP隧道的实例</title>
      <link>https://whowin.gitee.io/post/blog/network/0018-tun-example-for-setting-up-ip-tunnel/</link>
      <pubDate>Tue, 07 Mar 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0018-tun-example-for-setting-up-ip-tunnel/</guid>
      <description>&lt;p&gt;通常的socket编程，面对的都是物理网卡，Linux下其实很容易创建虚拟网卡；本文简单介绍一下Linux虚拟网卡的概念，并以tun设备为例在客户端和服务器端分别建立一个实际的虚拟网卡，最终实现一个从客户端到服务器的简单的IP隧道，希望本文能对理解虚拟网卡和IP隧道有所帮助，本文将提供完整的源程序；阅读本文需要具备在Linux下使用C语言进行IPv4下socket编程的基本能力，本文对网络编程的初学者难度较大。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用SNTP协议从时间服务器同步时间</title>
      <link>https://whowin.gitee.io/post/blog/network/0017-sync-time-from-time-server-using-sntp/</link>
      <pubDate>Mon, 13 Feb 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0017-sync-time-from-time-server-using-sntp/</guid>
      <description>&lt;p&gt;在互联网上校准时间，是几乎连接在互联网上的每台计算机都要去做的事情，而且很多是在后台完成的，并不需要人工干预；互联网上有很多时间服务器可以发布精确的时间，计算机客户端使用NTP(Network Time Protocol)协议与这些时间服务器进行时间同步，使本机得到精确时间，本文简要描述了NTP协议的原理，对NTP协议的时间同步精度做了简要分析，并具体实现了SNTP(Simple Network Time Protocol)下的客户端，本文附有完整的C语言SNTP客户端的源程序。阅读本文只需掌握基本的socket编程即可，本文对网络编程的初学者难度不大。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>简单的路由表查找程序</title>
      <link>https://whowin.gitee.io/post/blog/network/0016-longest-prefix-match/</link>
      <pubDate>Fri, 10 Feb 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0016-longest-prefix-match/</guid>
      <description>&lt;p&gt;在Linux操作系统中，内核中有一个路由表，它包含若干条路由记录，这些记录由子网IP、子网掩码、网关IP和接口名等组成，这些信息用于将数据包转发到其他子网或者连接到互联网；本文介绍了当需要转发数据包时，Linux内核查找路由表的基本算法，并用程序模拟了这个过程，附有完整的源代码。本文对网络编程的初学者难度不大。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用raw socket发送magic packet</title>
      <link>https://whowin.gitee.io/post/blog/network/0015-send-magic-packet-via-raw-socket/</link>
      <pubDate>Thu, 09 Feb 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0015-send-magic-packet-via-raw-socket/</guid>
      <description>&lt;p&gt;Magic Packet是进行网络唤醒的数据包，将这个数据包以广播的形式发到局域网上，与数据包中所关联的MAC相同的电脑就会被唤醒开机，通常我们都是使用UDP报文的形式来发送这个数据包，但实际上在进行网络唤醒的时候，只要报文中包含Magic Packet应该就可以唤醒相关的计算机，与IP协议、UDP协议没有任何关系，本文将试图抛开网络层(IP层)和传输层(TCP/UDP层)，直接在数据链路层发出Magic Packet，并成功实现网络唤醒，本文将提供完整的源代码。阅读本文需要有较好的网络编程基础，本文对网络编程的初学者有一定难度。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从proc文件系统中获取gateway的IP地址</title>
      <link>https://whowin.gitee.io/post/blog/network/0008-get-gateway-ip-from-proc-filesys/</link>
      <pubDate>Sun, 05 Feb 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0008-get-gateway-ip-from-proc-filesys/</guid>
      <description>&lt;p&gt;在linux的命令行下获取当前网络环境的gateway的IP并不是一件难事，常用的命令有&lt;code&gt;ip route&lt;/code&gt;或者&lt;code&gt;route -n&lt;/code&gt;，&lt;code&gt;route -n&lt;/code&gt;是通过读取proc文件系统下的文件来从内核获取路由表的，但&lt;code&gt;ip route&lt;/code&gt;是通过netlink来获取的路由表；本文将讨论如何编写程序从proc文件系统中获取路由表，并从路由表中获取gateway的IP地址，文章最后给出了完整的源程序，本文对初学者基本没有难度。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>linux下使用netlink获取gateway的IP地址</title>
      <link>https://whowin.gitee.io/post/blog/network/0009-get-gateway-ip-via-netlink/</link>
      <pubDate>Sat, 04 Feb 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0009-get-gateway-ip-via-netlink/</guid>
      <description>&lt;p&gt;要在linux下的程序中获取gateway的IP地址，使用netlink是一种直接、可靠的方法，不需要依赖其它命令，直接从linux内核获取信息，netlink编程的中文资料很少，本文试图用尽可能简单的方式讨论使用netlink获取gataway的IP地址的编程方法，并有大量篇幅介绍netlink的相关数据结构和编程方法，阅读本文需要对linux下编程有一定了解，熟悉IPv4的socket编程；本文对网络编程的初学者有较大难度。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>接收arp请求并发送回应的实例</title>
      <link>https://whowin.gitee.io/post/blog/network/0007-recv-arp-request-and-reply/</link>
      <pubDate>Thu, 12 Jan 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0007-recv-arp-request-and-reply/</guid>
      <description>&lt;p&gt;ARP协议在网络编程中有着重要的地位，是一个工作在数据链路层的协议，本文简单介绍了ARP协议，用一个实例查看收到的ARP请求，并对该请求发出ARP回应，实例有完整的源代码，使用C语言在Linux下实现，代码中有详细的注释；阅读本文需要有一定的网络编程基础，了解OSI的网络模型，本文对初学者有一定的难度。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何用C语言操作arp cache</title>
      <link>https://whowin.gitee.io/post/blog/network/0014-handling-arp-cache/</link>
      <pubDate>Thu, 12 Jan 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0014-handling-arp-cache/</guid>
      <description>&lt;p&gt;arp cache中存放着局域网内IP地址和MAC地址的对应关系，对socket通信是至关重要的，arp cache由Linux内核进行维护，本文介绍如何用ioctl获取arp cache记录，添加新记录到arp cache中，删除arp cache中记录，每一种操作均给出了完整的源程序，本文程序在ubuntu 20.4中编译运行成功，gcc版本9.4.0，阅读本文需要有基本的socket编程和ioctl的知识，并对ARP协议有所了解，本文对网络编程的初学者难度不大。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TCP服务器如何使用select处理多客户连接</title>
      <link>https://whowin.gitee.io/post/blog/network/0011-handling-multiple-clients-on-server-with-select/</link>
      <pubDate>Mon, 09 Jan 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0011-handling-multiple-clients-on-server-with-select/</guid>
      <description>&lt;p&gt;TCP是一种面向连接的通信方式，一个TCP服务器难免会遇到同时处理多个用户的连接请求的问题，本文用一个简化的实例说明如何在一个TCP服务器程序中，使用select处理同时出现的多个客户连接，文章给出了程序源代码，阅读本文应该具备了基本的socket编程知识，熟悉基本的服务器/客户端模型架构；本文对初学者难度不大。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用select实现的UDP/TCP组合服务器</title>
      <link>https://whowin.gitee.io/post/blog/network/0010-tcp-and-udp-server-using-select/</link>
      <pubDate>Sat, 07 Jan 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0010-tcp-and-udp-server-using-select/</guid>
      <description>&lt;p&gt;独立的 TCP 服务器和UDP服务器，可以找到很多例子，但如果一个服务希望在同一个端口上既提供 TCP 服务，也提供 UDP 服务，写两个服务端显然不是一个好的办法，也不利于以后的维护，本文将把UDP服务器和 TCP 服务器合并成一个服务器，该服务器既可以提供 UDP 服务也可以提供 TCP 服务，本文将给出完整的源代码，阅读本文需要掌握基本的 socket 编程方法，本文对初学者难度不大。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用C语言实现服务器/客户端的TCP通信</title>
      <link>https://whowin.gitee.io/post/blog/network/0012-tcp-server-client-implementation-in-c/</link>
      <pubDate>Fri, 06 Jan 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0012-tcp-server-client-implementation-in-c/</guid>
      <description>&lt;p&gt;本文力求使用简单的描述说明一个服务器/客户端TCP通信的基本程序框架，使读者在这个框架下可以构建更加复杂的服务，文中给出了服务器端和客户端的实例源程序，本文适合网络编程的初学者阅读；本文的程序在ubuntu 20.04中编译运行成功，gcc版本号为：9.4.0&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用C语言实现服务器/客户端的UDP通信</title>
      <link>https://whowin.gitee.io/post/blog/network/0013-udp-server-client-implementation-in-c/</link>
      <pubDate>Thu, 05 Jan 2023 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0013-udp-server-client-implementation-in-c/</guid>
      <description>&lt;p&gt;本文旨在使用简单的例子说明编写一个服务器/客户端模式的UDP通信程序的步骤，并通过一个实例给出了程序的基本框架，使读者可以在这个框架下经过扩展构建出更加复杂的服务，本文适合网络通信的初学者阅读；本文的程序在ubuntu 20.04中编译运行成功，gcc版本号为：9.4.0&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何使用raw socket发送UDP报文</title>
      <link>https://whowin.gitee.io/post/blog/network/0006-send-udp-with-raw-socket/</link>
      <pubDate>Tue, 27 Dec 2022 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0006-send-udp-with-raw-socket/</guid>
      <description>&lt;p&gt;使用raw socket发送报文比接收报文要复杂一些，因为需要在程序中构建数据链路层、网络层和传输层的报头，本文以发送UDP报文为例说明在使用raw socket时如何构建数据链路层、网络层和传输层的报头并发送报文，文中给出了完整的源程序；阅读本文需要掌握基本的IPv4下的socket编程方法，本文对初学者有一定难度。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>如何计算UDP头的checksum</title>
      <link>https://whowin.gitee.io/post/blog/network/0003-checksum-of-udp-header/</link>
      <pubDate>Mon, 12 Dec 2022 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0003-checksum-of-udp-header/</guid>
      <description>&lt;p&gt;UDP报头只有4个字段，分别是：源端口号、目的端口号、报文长度和报头checksum，其中的报头checksum这个字段在IPv4中并不是强制的，但在IPv6中是强制的，本文介绍UDP报头中checksum的计算方法，并给出相应的源程序，实际上，网络通信中常用的IP报头、TCP报头和UDP报头中都有checksum，其计算方法基本一样，所以把这些检查和一般统称为Internet Checksum；本文对网络编程的初学者难度不大。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux下如何在数据链路层接收原始数据包</title>
      <link>https://whowin.gitee.io/post/blog/network/0002-link-layer-programming/</link>
      <pubDate>Wed, 07 Dec 2022 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0002-link-layer-programming/</guid>
      <description>&lt;p&gt;大多数的网络编程都是在应用层接收数据和发送数据的，程序员无需关注报文的各种报头，网络协议栈会解决这些问题，本文介绍在数据链路层的网络编程方法，介绍如何在数据链路层直接接收从物理层发过来的原始数据包，要得到数据，必须自己解开数据链路层、网络层和传输层的报头，文章给出了一个完整的范例程序，希望本文能帮助读者对网络通信有更深刻的理解；阅读本文需要具备基本的使用socket进行网络编程的能力，熟悉OSI的网络模型，本文对初学者有一定的难度。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C语言获取ipv6地址的三种方法</title>
      <link>https://whowin.gitee.io/post/blog/network/0001-how-to-get-ipv6-in-c/</link>
      <pubDate>Sun, 16 Oct 2022 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/network/0001-how-to-get-ipv6-in-c/</guid>
      <description>&lt;p&gt;使用通常获取ipv4的IP地址的方法是无法获取ipv6地址的，本文介绍了使用C语言获取ipv6地址的三种方法：从proc文件从系统获取ipv6地址、使用getifaddrs()函数获取ipv6地址和使用netlink获取ipv6地址，每种方法均给出了完整的源程序，本文所有实例在 ubuntu 20.04 下测试通过，gcc 版本 9.4.0；阅读本文需要有一定的网络编程基础知识和IPv6的知识。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C语言函数调用时的参数传递机制</title>
      <link>https://whowin.gitee.io/post/blog/c/0001-parameters-passing-mechanism/</link>
      <pubDate>Tue, 20 Sep 2022 16:43:29 +0800</pubDate>
      
      <guid>https://whowin.gitee.io/post/blog/c/0001-parameters-passing-mechanism/</guid>
      <description>&lt;p&gt;本文通过实例验证了 C 语言函数调用时参数传递机制在 32 位和 64 位时的不同；阅读本文不仅需要 C 语言的知识，还需要有一些汇编语言的知识。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
